version: "3.0"
services:
  tedge:
    build:
      context: ./tedge
      args: 
        MONGO_HOST: mongodb1
        MONGO_PORT: 27017
    container_name: thin-edge-setup.io
    expose:
      - "8883"
      - "9080"
    ports:
      - "8883:8883"
      - "9080:9080"
    environment:
      - MONGO_HOST=mongodb1
      - MONGO_PORT=27017
      - NODERED_HOST=node-red
    depends_on:
      - mongodb
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  # Test version: map local directory and build angular locally (three changes are required in total)  
  # in file docker-compose.yml
  # 1. map web app from local directory, build outside
  ##  - ./:/app/
  # in file tedge/Dockerfile.yml
  # 2. run in tedge cmd: npm run build to build outside of the container, the result is then mapped with the following volume mapping:  ./:/app/
  # 3. enable entrypoint ENTRYPOINT ["/bin/bash", "/app/tedge/start.sh"] in tedge/Dockerfile
  mqtt-collector:
    build: ./mqtt-collector
    container_name: mqtt-collector
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - MQTT_BROKER=tedge
      - MQTT_PORT=8883
      - MONGO_HOST=mongodb1
      - MONGO_PORT=27017
  mongodb:
    image: mongo:latest
    container_name: mongodb1
    environment:
      MONGO_REPLICA_SET_NAME: rsmongo
    expose:
      - "27017"
    ports:
      - "27017:27017"
    command:
      [
        "--bind_ip_all",
        "--replSet",
        "rsmongo",
        "--journal",
        "--dbpath",
        "/data/db"
      ]
    volumes:
      - mongodata1:/data/db # This is where your volume will persist. e.g. VOLUME-DIR = ./volumes/mongodb
      - mongoconfig:/data/configdb
    deploy:
      restart_policy:
        condition: on-failure
  mongo-setup:
    image: mongo-setup
    build: "./mongo"
    container_name: mongo-setup
    environment:
      TTL_DOCUMENT: 3600 # documents are automatically deleted after 3600 seconds / 1 h
    depends_on:
      - mongodb
    volumes:
      - mongodata2:/data
  node-red:
    image: nodered/node-red:latest
    container_name: node-red
    ports:
      - "1880:1880"
    volumes:
      - nodereddata:/data
  node-red-setup:
    image: node-red-setup
    build: "./node-red"
    container_name: node-red-setup
    depends_on:
      - node-red
volumes:
  mongodata1:
  mongoconfig:
  mongodata2:
  nodereddata: