version: "3.0"
services:
  tedge:
    build:
      context: ./tedge
      args: 
        MONGO_HOST: mongodb1
        MONGO_PORT: 27017
    container_name: thin-edge-setup.io
    expose:
      - "1883"
      - "9080"
    ports:
      - "1883:1883"
      - "9080:9080"
    environment:
      - MONGO_HOST=mongodb1
      - MONGO_PORT=27017
      - NODERED_HOST=node-red
      - MQTT_BROKER=tedge
      - MQTT_PORT=1883
      - STORAGE_ENABLED=true  # false (not using Mongo) | true (using Mongo)
    # Use for debugging openrc init problems
    # command: ["sleep", "infinity"]
    tmpfs:
      - /run
      - /run/lock
    depends_on:
      - mongodb
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  # To save time when developing the ui, build Angular app locally and map the dist folder:  
  # 1. un-comment the following line
  #  - ./tedge/ui/dist:/app/tedge/server/dist
  # 2. in tedge/Dockerfile.yml comment out line
  # RUN npm run build
  # 3. in ./tedge/ui run
  #   npm i -f
  #   npm run build
  # mqtt-collector:
  #   build: ./mqtt-collector
  #   container_name: mqtt-collector
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   environment:
  #     - MQTT_BROKER=tedge
  #     - MQTT_PORT=1883
  #     - MONGO_HOST=mongodb1
  #     - MONGO_PORT=27017
  mongodb:
    image: mongo:latest
    container_name: mongodb1
    environment:
      MONGO_REPLICA_SET_NAME: rsmongo
    expose:
      - "27017"
    ports:
      - "27017:27017"
    command:
      [
        "--bind_ip_all",
        "--replSet",
        "rsmongo",
        "--dbpath",
        "/data/db"
      ]
    volumes:
      - mongodata1:/data/db # This is where your volume will persist. e.g. VOLUME-DIR = ./volumes/mongodb
      - mongoconfig:/data/configdb
    deploy:
      restart_policy:
        condition: on-failure
  mongo-setup:
    image: mongo-setup
    build: "./mongo"
    container_name: mongo-setup
    environment:
      TTL_DOCUMENT: 3600 # documents are automatically deleted after 3600 seconds ~ 1 h
    depends_on:
      - mongodb
    volumes:
      - mongodata2:/data
  node-red:
    image: nodered/node-red:latest
    container_name: node-red
    ports:
      - "1880:1880"
    volumes:
      - nodereddata:/data
  node-red-setup:
    image: node-red-setup
    build: "./node-red"
    container_name: node-red-setup
    depends_on:
      - node-red
volumes:
  mongodata1:
  mongoconfig:
  mongodata2:
  nodereddata: